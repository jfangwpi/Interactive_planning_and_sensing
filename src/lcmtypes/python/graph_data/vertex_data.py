"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

class vertex_data(object):
    __slots__ = ["idx_", "ig_", "p_", "isROIs_", "isNZIG_", "isSamples_"]

    __typenames__ = ["int64_t", "double", "double", "boolean", "boolean", "boolean"]

    __dimensions__ = [None, None, None, None, None, None]

    def __init__(self):
        self.idx_ = 0
        self.ig_ = 0.0
        self.p_ = 0.0
        self.isROIs_ = False
        self.isNZIG_ = False
        self.isSamples_ = False

    def encode(self):
        buf = BytesIO()
        buf.write(vertex_data._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">qddbbb", self.idx_, self.ig_, self.p_, self.isROIs_, self.isNZIG_, self.isSamples_))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != vertex_data._get_packed_fingerprint():
            raise ValueError("Decode error")
        return vertex_data._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = vertex_data()
        self.idx_, self.ig_, self.p_ = struct.unpack(">qdd", buf.read(24))
        self.isROIs_ = bool(struct.unpack('b', buf.read(1))[0])
        self.isNZIG_ = bool(struct.unpack('b', buf.read(1))[0])
        self.isSamples_ = bool(struct.unpack('b', buf.read(1))[0])
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if vertex_data in parents: return 0
        tmphash = (0xa654e3d489b1de3b) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if vertex_data._packed_fingerprint is None:
            vertex_data._packed_fingerprint = struct.pack(">Q", vertex_data._get_hash_recursive([]))
        return vertex_data._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

