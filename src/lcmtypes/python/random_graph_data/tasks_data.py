"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

import random_graph_data.task_data

class tasks_data(object):
    __slots__ = ["num_tasks_", "tasks_"]

    __typenames__ = ["int64_t", "random_graph_data.task_data"]

    __dimensions__ = [None, ["num_tasks_"]]

    def __init__(self):
        self.num_tasks_ = 0
        self.tasks_ = []

    def encode(self):
        buf = BytesIO()
        buf.write(tasks_data._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">q", self.num_tasks_))
        for i0 in range(self.num_tasks_):
            assert self.tasks_[i0]._get_packed_fingerprint() == random_graph_data.task_data._get_packed_fingerprint()
            self.tasks_[i0]._encode_one(buf)

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != tasks_data._get_packed_fingerprint():
            raise ValueError("Decode error")
        return tasks_data._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = tasks_data()
        self.num_tasks_ = struct.unpack(">q", buf.read(8))[0]
        self.tasks_ = []
        for i0 in range(self.num_tasks_):
            self.tasks_.append(random_graph_data.task_data._decode_one(buf))
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if tasks_data in parents: return 0
        newparents = parents + [tasks_data]
        tmphash = (0x1478154bd7f01031+ random_graph_data.task_data._get_hash_recursive(newparents)) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if tasks_data._packed_fingerprint is None:
            tasks_data._packed_fingerprint = struct.pack(">Q", tasks_data._get_hash_recursive([]))
        return tasks_data._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

