"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

import distribution_data.path_dist

class paths_dist(object):
    __slots__ = ["num_paths", "dist_path"]

    __typenames__ = ["int32_t", "distribution_data.path_dist"]

    __dimensions__ = [None, ["num_paths"]]

    def __init__(self):
        self.num_paths = 0
        self.dist_path = []

    def encode(self):
        buf = BytesIO()
        buf.write(paths_dist._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">i", self.num_paths))
        for i0 in range(self.num_paths):
            assert self.dist_path[i0]._get_packed_fingerprint() == distribution_data.path_dist._get_packed_fingerprint()
            self.dist_path[i0]._encode_one(buf)

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != paths_dist._get_packed_fingerprint():
            raise ValueError("Decode error")
        return paths_dist._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = paths_dist()
        self.num_paths = struct.unpack(">i", buf.read(4))[0]
        self.dist_path = []
        for i0 in range(self.num_paths):
            self.dist_path.append(distribution_data.path_dist._decode_one(buf))
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if paths_dist in parents: return 0
        newparents = parents + [paths_dist]
        tmphash = (0x483c8881b8085560+ distribution_data.path_dist._get_hash_recursive(newparents)) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if paths_dist._packed_fingerprint is None:
            paths_dist._packed_fingerprint = struct.pack(">Q", paths_dist._get_hash_recursive([]))
        return paths_dist._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

