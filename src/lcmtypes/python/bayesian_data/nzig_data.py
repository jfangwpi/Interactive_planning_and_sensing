"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

class nzig_data(object):
    __slots__ = ["num_nzig_", "nzig_"]

    __typenames__ = ["int32_t", "int64_t"]

    __dimensions__ = [None, ["num_nzig_"]]

    def __init__(self):
        self.num_nzig_ = 0
        self.nzig_ = []

    def encode(self):
        buf = BytesIO()
        buf.write(nzig_data._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">i", self.num_nzig_))
        buf.write(struct.pack('>%dq' % self.num_nzig_, *self.nzig_[:self.num_nzig_]))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != nzig_data._get_packed_fingerprint():
            raise ValueError("Decode error")
        return nzig_data._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = nzig_data()
        self.num_nzig_ = struct.unpack(">i", buf.read(4))[0]
        self.nzig_ = struct.unpack('>%dq' % self.num_nzig_, buf.read(self.num_nzig_ * 8))
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if nzig_data in parents: return 0
        tmphash = (0xefd073321198f0c1) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if nzig_data._packed_fingerprint is None:
            nzig_data._packed_fingerprint = struct.pack(">Q", nzig_data._get_hash_recursive([]))
        return nzig_data._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

