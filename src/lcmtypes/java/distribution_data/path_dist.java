/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

package distribution_data;
 
import java.io.*;
import java.util.*;
import lcm.lcm.*;
 
public final class path_dist implements lcm.lcm.LCMEncodable
{
    public int num_sample;
    public distribution_data.sample cost_dist[];
 
    public path_dist()
    {
    }
 
    public static final long LCM_FINGERPRINT;
    public static final long LCM_FINGERPRINT_BASE = 0x29238fd62ba89e85L;
 
    static {
        LCM_FINGERPRINT = _hashRecursive(new ArrayList<Class<?>>());
    }
 
    public static long _hashRecursive(ArrayList<Class<?>> classes)
    {
        if (classes.contains(distribution_data.path_dist.class))
            return 0L;
 
        classes.add(distribution_data.path_dist.class);
        long hash = LCM_FINGERPRINT_BASE
             + distribution_data.sample._hashRecursive(classes)
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(LCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        outs.writeInt(this.num_sample); 
 
        for (int a = 0; a < this.num_sample; a++) {
            this.cost_dist[a]._encodeRecursive(outs); 
        }
 
    }
 
    public path_dist(byte[] data) throws IOException
    {
        this(new LCMDataInputStream(data));
    }
 
    public path_dist(DataInput ins) throws IOException
    {
        if (ins.readLong() != LCM_FINGERPRINT)
            throw new IOException("LCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static distribution_data.path_dist _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        distribution_data.path_dist o = new distribution_data.path_dist();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        this.num_sample = ins.readInt();
 
        this.cost_dist = new distribution_data.sample[(int) num_sample];
        for (int a = 0; a < this.num_sample; a++) {
            this.cost_dist[a] = distribution_data.sample._decodeRecursiveFactory(ins);
        }
 
    }
 
    public distribution_data.path_dist copy()
    {
        distribution_data.path_dist outobj = new distribution_data.path_dist();
        outobj.num_sample = this.num_sample;
 
        outobj.cost_dist = new distribution_data.sample[(int) num_sample];
        for (int a = 0; a < this.num_sample; a++) {
            outobj.cost_dist[a] = this.cost_dist[a].copy();
        }
 
        return outobj;
    }
 
}

