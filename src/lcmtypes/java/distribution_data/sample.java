/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

package distribution_data;
 
import java.io.*;
import java.util.*;
import lcm.lcm.*;
 
public final class sample implements lcm.lcm.LCMEncodable
{
    public double cost;
    public double p;
 
    public sample()
    {
    }
 
    public static final long LCM_FINGERPRINT;
    public static final long LCM_FINGERPRINT_BASE = 0x3a9f3df40509e025L;
 
    static {
        LCM_FINGERPRINT = _hashRecursive(new ArrayList<Class<?>>());
    }
 
    public static long _hashRecursive(ArrayList<Class<?>> classes)
    {
        if (classes.contains(distribution_data.sample.class))
            return 0L;
 
        classes.add(distribution_data.sample.class);
        long hash = LCM_FINGERPRINT_BASE
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(LCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        outs.writeDouble(this.cost); 
 
        outs.writeDouble(this.p); 
 
    }
 
    public sample(byte[] data) throws IOException
    {
        this(new LCMDataInputStream(data));
    }
 
    public sample(DataInput ins) throws IOException
    {
        if (ins.readLong() != LCM_FINGERPRINT)
            throw new IOException("LCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static distribution_data.sample _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        distribution_data.sample o = new distribution_data.sample();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        this.cost = ins.readDouble();
 
        this.p = ins.readDouble();
 
    }
 
    public distribution_data.sample copy()
    {
        distribution_data.sample outobj = new distribution_data.sample();
        outobj.cost = this.cost;
 
        outobj.p = this.p;
 
        return outobj;
    }
 
}

