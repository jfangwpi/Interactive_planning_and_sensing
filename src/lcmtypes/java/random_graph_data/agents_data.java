/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

package random_graph_data;
 
import java.io.*;
import java.util.*;
import lcm.lcm.*;
 
public final class agents_data implements lcm.lcm.LCMEncodable
{
    public byte num_agents_;
    public random_graph_data.agent_data agents_[];
 
    public agents_data()
    {
    }
 
    public static final long LCM_FINGERPRINT;
    public static final long LCM_FINGERPRINT_BASE = 0x85f3bd8986d5e356L;
 
    static {
        LCM_FINGERPRINT = _hashRecursive(new ArrayList<Class<?>>());
    }
 
    public static long _hashRecursive(ArrayList<Class<?>> classes)
    {
        if (classes.contains(random_graph_data.agents_data.class))
            return 0L;
 
        classes.add(random_graph_data.agents_data.class);
        long hash = LCM_FINGERPRINT_BASE
             + random_graph_data.agent_data._hashRecursive(classes)
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(LCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        outs.writeByte(this.num_agents_); 
 
        for (int a = 0; a < this.num_agents_; a++) {
            this.agents_[a]._encodeRecursive(outs); 
        }
 
    }
 
    public agents_data(byte[] data) throws IOException
    {
        this(new LCMDataInputStream(data));
    }
 
    public agents_data(DataInput ins) throws IOException
    {
        if (ins.readLong() != LCM_FINGERPRINT)
            throw new IOException("LCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static random_graph_data.agents_data _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        random_graph_data.agents_data o = new random_graph_data.agents_data();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        this.num_agents_ = ins.readByte();
 
        this.agents_ = new random_graph_data.agent_data[(int) num_agents_];
        for (int a = 0; a < this.num_agents_; a++) {
            this.agents_[a] = random_graph_data.agent_data._decodeRecursiveFactory(ins);
        }
 
    }
 
    public random_graph_data.agents_data copy()
    {
        random_graph_data.agents_data outobj = new random_graph_data.agents_data();
        outobj.num_agents_ = this.num_agents_;
 
        outobj.agents_ = new random_graph_data.agent_data[(int) num_agents_];
        for (int a = 0; a < this.num_agents_; a++) {
            outobj.agents_[a] = this.agents_[a].copy();
        }
 
        return outobj;
    }
 
}

