/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

package graph_data;
 
import java.io.*;
import java.util.*;
import lcm.lcm.*;
 
public final class bayesian_opt_data implements lcm.lcm.LCMEncodable
{
    public boolean bayesian_opt_flag_;
    public int num_sensor_;
    public long sensor_pos_[];
 
    public bayesian_opt_data()
    {
    }
 
    public static final long LCM_FINGERPRINT;
    public static final long LCM_FINGERPRINT_BASE = 0xaf3f53ac9d67c765L;
 
    static {
        LCM_FINGERPRINT = _hashRecursive(new ArrayList<Class<?>>());
    }
 
    public static long _hashRecursive(ArrayList<Class<?>> classes)
    {
        if (classes.contains(graph_data.bayesian_opt_data.class))
            return 0L;
 
        classes.add(graph_data.bayesian_opt_data.class);
        long hash = LCM_FINGERPRINT_BASE
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(LCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        outs.writeByte( this.bayesian_opt_flag_ ? 1 : 0); 
 
        outs.writeInt(this.num_sensor_); 
 
        for (int a = 0; a < this.num_sensor_; a++) {
            outs.writeLong(this.sensor_pos_[a]); 
        }
 
    }
 
    public bayesian_opt_data(byte[] data) throws IOException
    {
        this(new LCMDataInputStream(data));
    }
 
    public bayesian_opt_data(DataInput ins) throws IOException
    {
        if (ins.readLong() != LCM_FINGERPRINT)
            throw new IOException("LCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static graph_data.bayesian_opt_data _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        graph_data.bayesian_opt_data o = new graph_data.bayesian_opt_data();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        this.bayesian_opt_flag_ = ins.readByte()!=0;
 
        this.num_sensor_ = ins.readInt();
 
        this.sensor_pos_ = new long[(int) num_sensor_];
        for (int a = 0; a < this.num_sensor_; a++) {
            this.sensor_pos_[a] = ins.readLong();
        }
 
    }
 
    public graph_data.bayesian_opt_data copy()
    {
        graph_data.bayesian_opt_data outobj = new graph_data.bayesian_opt_data();
        outobj.bayesian_opt_flag_ = this.bayesian_opt_flag_;
 
        outobj.num_sensor_ = this.num_sensor_;
 
        outobj.sensor_pos_ = new long[(int) num_sensor_];
        if (this.num_sensor_ > 0)
            System.arraycopy(this.sensor_pos_, 0, outobj.sensor_pos_, 0, this.num_sensor_); 
        return outobj;
    }
 
}

