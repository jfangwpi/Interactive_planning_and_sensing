/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

package graph_data;
 
import java.io.*;
import java.util.*;
import lcm.lcm.*;
 
public final class vertex_data implements lcm.lcm.LCMEncodable
{
    public long idx_;
    public double ig_;
    public double p_;
    public boolean isROIs_;
    public boolean isNZIG_;
    public boolean isSamples_;
 
    public vertex_data()
    {
    }
 
    public static final long LCM_FINGERPRINT;
    public static final long LCM_FINGERPRINT_BASE = 0xa654e3d489b1de3bL;
 
    static {
        LCM_FINGERPRINT = _hashRecursive(new ArrayList<Class<?>>());
    }
 
    public static long _hashRecursive(ArrayList<Class<?>> classes)
    {
        if (classes.contains(graph_data.vertex_data.class))
            return 0L;
 
        classes.add(graph_data.vertex_data.class);
        long hash = LCM_FINGERPRINT_BASE
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(LCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        outs.writeLong(this.idx_); 
 
        outs.writeDouble(this.ig_); 
 
        outs.writeDouble(this.p_); 
 
        outs.writeByte( this.isROIs_ ? 1 : 0); 
 
        outs.writeByte( this.isNZIG_ ? 1 : 0); 
 
        outs.writeByte( this.isSamples_ ? 1 : 0); 
 
    }
 
    public vertex_data(byte[] data) throws IOException
    {
        this(new LCMDataInputStream(data));
    }
 
    public vertex_data(DataInput ins) throws IOException
    {
        if (ins.readLong() != LCM_FINGERPRINT)
            throw new IOException("LCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static graph_data.vertex_data _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        graph_data.vertex_data o = new graph_data.vertex_data();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        this.idx_ = ins.readLong();
 
        this.ig_ = ins.readDouble();
 
        this.p_ = ins.readDouble();
 
        this.isROIs_ = ins.readByte()!=0;
 
        this.isNZIG_ = ins.readByte()!=0;
 
        this.isSamples_ = ins.readByte()!=0;
 
    }
 
    public graph_data.vertex_data copy()
    {
        graph_data.vertex_data outobj = new graph_data.vertex_data();
        outobj.idx_ = this.idx_;
 
        outobj.ig_ = this.ig_;
 
        outobj.p_ = this.p_;
 
        outobj.isROIs_ = this.isROIs_;
 
        outobj.isNZIG_ = this.isNZIG_;
 
        outobj.isSamples_ = this.isSamples_;
 
        return outobj;
    }
 
}

