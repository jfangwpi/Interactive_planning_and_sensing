import numpy as np
import math
from matplotlib import pyplot as plt
from mpl_toolkits.mplot3d import Axes3D
from scipy.linalg import cholesky, cho_solve, solve_triangular

from sklearn.metrics.classification import accuracy_score, log_loss
from sklearn.gaussian_process import GaussianProcessClassifier
from sklearn.gaussian_process import GaussianProcessRegressor
from sklearn.gaussian_process.kernels import ConstantKernel, RBF
from sklearn.gaussian_process.kernels import Matern

# ig_reference_r0 = [0.468,0.552,0.552,0.552,0.468,0.251,0.385,0.084,0,0]
# ig_reference_r1 = [0.552,0.636,0.636,0.552,0.636,0.552,0.552,0.084,0,0]
# ig_reference_r2 = [0.552,0.636,0.468,0.251,0.552,0.636,0.552,0.084,0,0]
# ig_reference_r3 = [0.468,0.552,0.167,0.084,0.552,0.636,0.552,0.084,0,0]
# ig_reference_r4 = [0.251,0.468,0.084,0.084,0.552,0.636,0.552,0.084,0,0]
# ig_reference_r5 = [0.468,0.552,0.084,0.084,0.552,0.636,0.552,0.084,0,0]
# ig_reference_r6 = [0.552,0.552,0.084,0.084,0.552,0.636,0.552,0.167,0,0]
# ig_reference_r7 = [0.552,0.552,0.084,0.084,0.552,0.636,0.636,0.468,0.084,0]
# ig_reference_r8 = [0.468,0.552,0.084,0.084,0.552,0.636,0.636,0.468,0.084,0]
# ig_reference_r9 = [0.167,0.385,0.084,0.084,0.468,0.552,0.468,0.167,0,0]
# ig_reference = [ig_reference_r0,ig_reference_r1,ig_reference_r2,ig_reference_r3,ig_reference_r4,ig_reference_r5,ig_reference_r6,ig_reference_r7,ig_reference_r8,ig_reference_r9]

# none_zero_ig = [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 40, 41, 42, 43, 44, 45, 46, 47, 50, 51, 52, 53, 54, 55, 56, 57, 60, 61, 62, 63, 64, 65, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 80, 81, 82, 83, 84, 85, 86, 87, 90, 91, 92, 93, 94, 95, 96, 97]


ig_reference_r0 = [0.0,0.0,0.055,0.11,0.217,0.075,0.0,0.0,0.0,0.0]
ig_reference_r1 = [0.055,0.055,0.272,0.272,0.149,0.097,0.02,0.0,0.0,0.0]
ig_reference_r2 = [0.272,0.055,0.055,0.075,0.152,0.045,0.0,0.0,0.0,0.0]
ig_reference_r3 = [0.272,0.075,0.084,0.075,0.297,0.089,0.025,0.055,0.0,0.0]
ig_reference_r4 = [0.075,0.181,0.346,0.236,0.311,0.135,0.207,0.237,0.075,0.0]
ig_reference_r5 = [0.0,0.025,0.118,0.05,0.207,0.292,0.292,0.135,0.097,0.02]
ig_reference_r6 = [0.0,0.0,0.031,0.089,0.045,0.055,0.06,0.035,0.031,0.0]
ig_reference_r7 = [0.055,0.02,0.158,0.262,0.207,0.02,0.0,0.031,0.035,0.005]
ig_reference_r8 = [0.217,0.08,0.054,0.135,0.237,0.055,0.02,0.097,0.08,0.0]
ig_reference_r9 = [0.075,0.097,0.045,0.097,0.075,0.0,0.0,0.075,0.217,0.055]
ig_reference = [ig_reference_r0,ig_reference_r1,ig_reference_r2,ig_reference_r3,ig_reference_r4,ig_reference_r5,ig_reference_r6,ig_reference_r7,ig_reference_r8,ig_reference_r9]

none_zero_ig = [0, 1, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 62, 63, 64, 65, 66, 67, 70, 71, 72, 73, 74, 75, 76, 80, 81, 82, 83, 84, 85, 86, 90, 91, 92, 93, 94, 95, 96]

ig_none_zero = 0
for row in range(10):
    for col in range(10):
        if ig_reference[row][col] != 0.0:
            ig_none_zero = ig_none_zero + 1
print("Total number of none zeros ig cell is {}".format(ig_none_zero))

# Case 1
# training_X = [[0.5,7.5],[1.5,7.5],[0.5,8.5],[2.5,7.5],[3.5,7.5],[4.5,7.5]]
# training_Y = np.array([[0.552],[0.552],[0.468],[0.084],[0.0],[0.084]])

# Case 2
# training_X = [[0.5,7.5],[0.5,5.5],[0.5,2.5],[1.5,1.5],[2.5,0.5],[4.5,0.5],[5.5,1.5],[5.5,3.5],[5.5,5.5],[5.5,7.5],[5.5,9.5],[7.5,9.5]]
# training_Y = np.array([[0.552],[0.468],[0.385],[0.265],[0.385],[0.468],[0.468],[0.468],[0.468],[0.468],[0.468],[0.167]])

# Case 3
# training_X = [[0.5,7.5],[0.5,5.5],[0.5,2.5],[1.5,1.5],[2.5,7.5],[2.5,5.5],[2.5,2.5],[2.5,0.5],[3.5,1.5],[4.5,0.5]]
# training_Y = np.array([[0.552],[0.468],[0.385],[0.265],[0.084],[0.167],[0.181],[0.385],[0.385],[0.468]])

# # Case 4
# training_X = [[0.5,7.5],[0.5,5.5],[0.5,2.5],[1.5,1.5],[2.5,7.5],[2.5,5.5],[2.5,2.5],[2.5,0.5],[3.5,1.5],[4.5,0.5],[5.5,9.5],[5.5,3.5],[6.5,8.5],[7.5,3.5]]
# training_Y = np.array([[0.552],[0.468],[0.385],[0.265],[0.084],[0.167],[0.181],[0.385],[0.385],[0.468],[0.468],[0.468],[0.552],[0]])

# Case 5
# training_X = [[0.5,7.5],[0.5,5.5],[0.5,2.5],[2.5,7.5],[2.5,5.5],[2.5,2.5],[2.5,0.5],[4.5,0.5],[5.5,9.5],[5.5,3.5],[6.5,8.5],[7.5,3.5]]
# training_Y = np.array([[0.552],[0.468],[0.385],[0.084],[0.167],[0.181],[0.385],[0.468],[0.468],[0.468],[0.552],[0]])

# Case 6
# training_X = [[0.5,7.5],[0.5,5.5],[0.5,2.5],[1.5,7.5],[1.5,5.5],[1.5,2.5],[1.5,1.5],[2.5,2.5],[2.5,0.5],[3.5,0.5],[5.5,9.5],[5.5,8.5],[5.5,3.5],[6.5,9.5],[6.5,8.5],[6.5,3.5]]
# training_Y = np.array([[0.552],[0.468],[0.385],[0.552],[0.552],[0.0],[0.265],[0.149],[0.385],[0.495],[0.468],[0.552],[0.468],[0.468],[0.552],[0.084]])

# Case 7
# training_X = [[1.5,8.5],[1.5,6.5],[1.5,4.5],[1.5,2.5],[1.5,0.5],[3.5,8.5],[3.5,6.5],[3.5,4.5],[3.5,2.5],[3.5,0.5],[5.5,8.5],[5.5,6.5],[5.5,4.5],[5.5,2.5],[5.5,0.5]]
# training_Y = np.array([[0.552],[0.552],[0.523],[0.0],[0.459],[0.0],[0.0],[0.084],[0.075],[0.495],[0.552],[0.468],[0.468],[0.468],[0.167]])


# Case 8
# training_X = [[0.5,8.5],[0.5,6.5],[0.5,4.5],[0.5,2.5],[0.5,0.5],[2.5,8.5],[2.5,6.5],[2.5,4.5],[2.5,2.5],[2.5,0.5],[4.5,8.5],[4.5,6.5],[4.5,4.5],[4.5,2.5],[4.5,0.5],[6.5,8.5],[7.5,6.5],[7.5,4.5],[7.5,2.5],[7.5,0.5],[8.5,8.5]]
# training_Y = np.array([[0.468],[0.552],[0.251],[0.552],[0.468],[0.084],[0.084],[0.084],[0.468],[0.552],[0.552],[0.552],[0.552],[0.552],[0.468],[0.636],[0.167],[0.084],[0.084],[0.084],[0.084]])

# Case 9
# training_X = [[1.5,8.5],[1.5,6.5],[1.5,4.5],[1.5,2.5],[1.5,0.5],[2.5,8.5],[2.5,6.5],[2.5,4.5],[2.5,2.5],[2.5,0.5],[4.5,8.5],[4.5,6.5],[4.5,4.5],[4.5,2.5],[4.5,0.5],[5.5,8.5],[5.5,6.5],[5.5,4.5],[5.5,2.5],[5.5,0.5],[7.5,8.5],[7.5,6.5],[7.5,4.5],[7.5,2.5],[7.5,0.5]]
# training_Y = np.array([[0.552],[0.552],[0.523],[0.149],[0.459],[0.084],[0.084],[0.468],[0.181],[0.385],[0.552],[0.552],[0.552],[0.552],[0.468],[0.636],[0.636],[0.636],[0.636],[0.251],[0.468],[0.167],[0.084],[0.084],[0.084]])

# Case 10
# training_X = [[0.5,8.5],[0.5,6.5],[0.5,4.5],[0.5,2.5],[0.5,0.5],[1.5,8.5],[1.5,6.5],[1.5,4.5],[1.5,2.5],[1.5,0.5],[2.5,8.5],[2.5,6.5],[2.5,4.5],[2.5,2.5],[2.5,0.5],[4.5,8.5],[4.5,6.5],[4.5,4.5],[4.5,2.5],[4.5,0.5],[6.5,8.5],[7.5,6.5],[7.5,4.5],[7.5,2.5],[7.5,0.5],[8.5,8.5]]
# training_Y = np.array([[0.468],[0.552],[0.251],[0.552],[0.468],[0.552],[0.552],[0.468],[0.636],[0.552],[0.084],[0.084],[0.084],[0.468],[0.552],[0.552],[0.552],[0.552],[0.552],[0.468],[0.636],[0.167],[0.084],[0.084],[0.084],[0.084]])


# # Case 1 for new IG prediction case
training_X = [[0.5,8.5],[0.5,4.5],[0.5,2.5],[1.5,1.5],[2.5,8.5],[2.5,6.5],[2.5,4.5],[3.5,1.5],[4.5,8.5],[4.5,4.5],[4.5,0.5],[5.5,3.5],[5.5,1.5],[6.5,4.5],[7.5,8.5],[7.5,6.5],[8.5,9.5],[8.5,7.5],[8.5,5.5]]
training_Y = np.array([[0.217],[0.075],[0.272],[0.055],[0.054],[0.031],[0.346],[0.272],[0.237],[0.311],[0.217],[0.089],[0.097],[0.207],[0.097],[0.035],[0.217],[0.035],[0.097]])


kernel_ = 1.0 * RBF(length_scale=1.0)
# kernel_ = Matern(length_scale=1.0)
gp = GaussianProcessRegressor(kernel=kernel_, alpha=1e-10).fit(training_X,training_Y)


# For visualization
XX = np.arange(0.5,10.5,1.0)
YY = np.arange(0.5,10.5,1.0)

XX1 = np.arange(0.5,10.5,1.0)
YY1 = np.arange(0.5,10.5,1.0)

ZZ = np.empty([10,10])
ZZ1 = np.empty([10,10])
err = 0
for idx1, row in enumerate(XX):
    for idx2,col in enumerate(YY):
        id = (9 - idx2) * 10 + idx1
        if id in none_zero_ig:
                K = [row,col]
                p_occ = gp.predict([K])
        
                # if idx1 <= 7:
                err += np.abs(ig_reference[idx2][idx1] - p_occ[0][0])**2
                # print("Corridinate {}, {}".format(idx2,idx1))
                # print("ig reference is {}".format(ig_reference[idx2][idx1]))
                # print("predict ig is {}".format(p_occ))
                # occ_ = gp_opt.predict(np.reshape(K,(-1,2)))
                ZZ[idx1,idx2] = np.abs((ig_reference[idx2][idx1] - p_occ[0][0]))
                ZZ1[idx1,idx2] = p_occ
                # plt.text(row,col,"{}".format(round(ZZ[idx1,idx2],3)), color='black',fontsize=10)
        else:
                ZZ[idx1,idx2] = 0.0
                ZZ1[idx1,idx2] = 0.0
print("====================================")
print("Squared Error is {}".format(err))
print("====================================")

XX ,YY = np.mgrid[0:10:11j,0:10:11j]
plt.figure()
for idx1, row in enumerate(XX1):
    for idx2,col in enumerate(YY1):
        plt.text(row,col,"{}".format(round(ZZ[idx1,idx2],3)), color='black',fontsize=10)
CMAP = plt.get_cmap('jet')
plt.pcolormesh(XX,YY,ZZ,cmap=CMAP)
cb = plt.colorbar(shrink = 1.0)
plt.title("Absolute error of IG")

plt.figure()
for idx1, row in enumerate(XX1):
    for idx2,col in enumerate(YY1):
        plt.text(row,col,"{}".format(round(ZZ1[idx1,idx2],3)), color='black',fontsize=10)
CMAP = plt.get_cmap('jet')
plt.pcolormesh(XX,YY,ZZ1,cmap=CMAP)
cb = plt.colorbar(shrink = 1.0)
plt.title("Predicted IG")

plt.show()

